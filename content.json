[{"title":"iOS自动化打包发布（Jenkins + Fastlane + GitLab + 蒲公英）","date":"2017-07-14T08:45:53.000Z","path":"2017/07/14/CI/","text":"前言在项目测试阶段，频繁的打包发布会耗费团队很多的时间。搭建一个自动化打包发布的平台，可以将我们从那些繁琐的打包发布流程中解放出来。 本文采用的方案是：Jenkins + Fastlane + GitLab + 蒲公英。 Fastlane安装Fastlane是一套使用Ruby写的自动化工具集，用于iOS和Android的自动化打包、发布等工作，可以节省大量的时间。 安装过程如下：1.检查Ruby版本，需要2.0及以上版本。在终端输入以下命令确认： 1ruby -v 需要注意的是需要将gem的source改为https://gems.ruby-china.org/。如何检查?在终端输入以下命令: 1gem sources 结果应为： 123*** CURRENT SOURCES ***https://gems.ruby-china.org/ 2.检查Xcode命令行工具是否安装。在终端输入以下命令： 1xcode-select --install 如果没有安装会进行安装。如果已经安装了则会提示： 1xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates 3.安装Fastlane 1sudo gem install fastlane --verbose 如果出现以下错误： 12ERROR: While executing gem ... (Errno::EPERM) Operation not permitted - /usr/bin/rougify 则输入以下命令： 1sudo gem install -n /usr/local/bin fastlane 4.检查Fastlane是否正确安装。输入以下命令： 1fastlane --version 可以看到Fastlane版本信息，我的是2.46.1。 蒲公英的Fastlane插件安装打开终端，进入你的项目工程的根目录，输入以下命令： 1fastlane add_plugin pgyer 出现 123456Plugin &apos;fastlane-plugin-pgyer&apos; was added to &apos;./fastlane/Pluginfile&apos;It looks like fastlane plugins are not yet set up for this project.fastlane will create a new Gemfile at path &apos;Gemfile&apos;This change is necessary for fastlane plugins to workShould fastlane modify the Gemfile at path &apos;Gemfile&apos; for you?(y/n) 输入y按回车，出现 12Installing plugin dependencies...Successfully installed plugins 便是安装成功了。 Fastlane配置1.打开终端，进入你的项目工程的根目录，输入以下命令： 1fastlane init 中间会让你输入苹果开发者账号的账号和密码，之后会在你项目工程的目录下生成一个fastlane文件夹，里面有Fastlane的配置文件，一个是Appfile文件，一个是Fastfile文件(如果要上传AppStore的话还有Deliverfile文件)。Appfile保存苹果开发者的相关信息、项目的相关信息等。Fastfile是运行脚本。 2.编辑Fastfile文件有时候一天需要打好几个包，为了区分，我们这里实现一个递增build号的功能。 (1)修改项目工程配置修改Build Settings中的Versioning配置，Current Project Version随便填一个，Versioning System选择Apple Generic。 修改Info.plist File路径 (2)定义一个递增build号的函数，添加到Fastfile中 123456789101112131415161718192021222324def updateProjectBuildNumbercurrentTime = Time.new.strftime(&quot;%Y%m%d&quot;)build = get_build_number()if build.include?&quot;#&#123;currentTime&#125;.&quot;# =&gt; 为当天版本 计算迭代版本号lastStr = build[build.length-2..build.length-1]lastNum = lastStr.to_ilastNum = lastNum + 1lastStr = lastNum.to_sif lastNum &lt; 10lastStr = lastStr.insert(0,&quot;0&quot;)endbuild = &quot;#&#123;currentTime&#125;.#&#123;lastStr&#125;&quot;else# =&gt; 非当天版本 build 号重置build = &quot;#&#123;currentTime&#125;.01&quot;endputs(&quot;*************| 更新build #&#123;build&#125; |*************&quot;)# =&gt; 更改项目 build 号increment_build_number(build_number: &quot;#&#123;build&#125;&quot;)end 实现自动打包的完整Fastfile如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# 定义fastlane版本号fastlane_version “2.46.1” # 定义打包平台default_platform :iosdef updateProjectBuildNumbercurrentTime = Time.new.strftime(&quot;%Y%m%d&quot;)build = get_build_number()if build.include?&quot;#&#123;currentTime&#125;.&quot;# =&gt; 为当天版本 计算迭代版本号lastStr = build[build.length-2..build.length-1]lastNum = lastStr.to_ilastNum = lastNum + 1lastStr = lastNum.to_sif lastNum &lt; 10lastStr = lastStr.insert(0,&quot;0&quot;)endbuild = &quot;#&#123;currentTime&#125;.#&#123;lastStr&#125;&quot;else# =&gt; 非当天版本 build 号重置build = &quot;#&#123;currentTime&#125;.01&quot;endputs(&quot;*************| 更新build #&#123;build&#125; |*************&quot;)# =&gt; 更改项目 build 号increment_build_number(build_number: &quot;#&#123;build&#125;&quot;)end#指定项目的scheme名称scheme=“TestCI”#蒲公英api_key和user_keyapi_key=“”user_key=“”# 任务脚本platform :ios dolane :development_build do|options|branch = options[:branch]puts “开始打development ipa”updateProjectBuildNumber #更改项目build号# 开始打包gym(#输出的ipa名称output_name:”#&#123;scheme&#125;_#&#123;get_build_number()&#125;”,# 是否清空以前的编译信息 true：是clean:true,# 指定打包方式，Release 或者 Debugconfiguration:&quot;Release&quot;,# 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, developmentexport_method:&quot;development&quot;,# 指定输出文件夹output_directory:&quot;./fastlane/build&quot;,)puts &quot;开始上传蒲公英&quot;# 开始上传蒲公英pgyer(api_key: “#&#123;api_key&#125;”, user_key: “#&#123;user_key&#125;”)endend 注意：蒲公英的 api_key 和 user_key，开发者在自己账号下的 账号设置-API信息 中可以找到。打其它类型的包的方法与development类似，可自定义一个新的lane实现。 在终端输入 1fastlane development_build 便会进行自动打包并上传蒲公英了。 Jenkins安装Jenkins 是一个开源项目，提供了一种易于使用的持续集成系统，使开发者从繁杂的集成中解脱出来，专注于更为重要的业务逻辑实现上。同时 Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。 安装过程如下：1.点击 http://mirrors.jenkins.io/war-stable/latest/jenkins.war 下载最新的Jenkins.war 2.打开终端，进入war包所在目录，执行以下命令： 1java -jar jenkins.war 注意：Jenkins依赖于Java运行环境，因此需要首先安装JDK,下载地址：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 3.执行完成之后打开浏览器输入http://localhost:8080/ 4.弹出Jenkins安装界面，会让你输入安全密码,输入完成之后选择默认安装。 5.新建管理员账号密码 对以上过程有疑问的话可以参考手把手教你利用Jenkins持续集成iOS项目 安装插件还是登录http://localhost:8080/ ，选择系统管理 - 管理插件。 安装GitLab插件在可选插件中选择GitLab Plugin和Gitlab Hook Plugin进行安装。 安装Xcode插件在可选插件中选择Xcode integration进行安装。 安装完成之后，我们就可以配置构建项目了。 构建任务1.点击新建，输入名称，构建一个自由风格的软件项目 2.配置Git 添加Git仓库地址，可以是HTTP也可以是SSH。点击Add 如果是HTTP 如果是SSH 注意：UserName是取一个名字，填写的Key是私钥。 3.配置脚本 因为我的Git仓库的目录是这样的 所以在执行fastlane development_build之前需要进入TestCI目录，即fastlane文件夹所在目录。 4.添加完成之后点击立即构建 5.执行成功显示如下 可以点击进入查看控制台输出 参考链接 http://www.jianshu.com/p/dac1ce3d7de8 http://www.jianshu.com/p/7b3f9cacc2ba https://www.pgyer.com/doc/view/fastlane http://www.jianshu.com/p/41ecb06ae95f","tags":[]},{"title":"我为什么要写博客？","date":"2017-07-12T12:49:05.000Z","path":"2017/07/12/why-blog/","text":"早就有想写博客的想法。但总是觉得自己的能力不足，所以迟迟没有动手。毕业工作，想法也有了改变。写博客更多是对生活的一种记录、总结。无论何等微不足道的举动．只要日日坚持．从中总会产生出某些类似观念的东西来。","tags":[{"name":"随笔","slug":"随笔","permalink":"//breadawesome.me/tags/随笔/"}]},{"title":"Mac下使用Hexo+Github搭建个人博客","date":"2017-07-12T12:14:50.000Z","path":"2017/07/12/hexo-blog/","text":"一、前言Hexo是一个快速、简洁且高效的博客框架，最近有搭建个人博客的想法，便动手尝试了。 二、初始化1.安装Node.js去Node.js官网下载相应的安装包，一路安装即可。 2.安装GitMac下安装Xcode就自带Git。 3.注册Github账号并新建仓库注册过程就不多说了，注册完成之后需要新建一个仓库。需要注意的是新创建的仓库的名字，必须是username.github.io。例如我的username是BreadAwesome，那么新创建的仓库的名字便是BreadAwesome.github.io。 4.配置SSH Key这一步不是必须的，配置SSH Key的话之后每次更新博客就不用都输入用户名和密码，可以方便一些。 以下是详细配置过程。(1)检查本机上是否已经存在SSH Key打开终端，输入如下命令 12cd .sshls -la 检查终端输出的文件列表中是否已经存在id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，则直接进入第三步。 (2)创建一个SSH Key在终端输入如下命令 1ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 按下回车，让你输入文件名，直接回车会创建使用默认文件名的文件(推荐使用默认文件名)，然后会提示你输入两次密码，可以为空。 (3)添加SSH Key到Github 如果你没有指定文件名（也就是使用的默认文件名），那么你的.ssh文件夹下，应该有一个id_rsa.pub文件了，打开该文件，复制里面的文本。然后登录Github，点击右上角头像右边的三角图标，点击Settings，然后在左边菜单栏点击SSH and GPG keys，点击New SSH key，Title 随便填一个，在Key栏填入你复制的内容，点击Add SSH key，就添加成功了。 (4)检验SSH Key是否配置成功在终端输入如下命令 1ssh -T git@github.com 如果出现 1Are you sure you want to continue connecting (yes/no)? 请输入yes再按回车。 如果最后出现 1Hi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 就说明你的SSH Key配置成功了。 5.安装Hexo前面我们已经安装了Node.js，这里我们使用npm命令来安装Hexo 1npm install -g hexo 等待一会就会完成下载安装。 接着在任意位置创建一个文件夹，如Blog，cd到该路径下执行以下命令 1hexo init 该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包 1npm install 到这里本地博客就搭建好了。执行以下命令（在你博客的对应文件夹路径下） 12hexo generatehexo server 在浏览器输入http://localhost:4000/ 就可以进行查看了。当然这个博客是本地的，别人是无法访问的，之后我们需要部署到GitHub上。 6.同步本地博客到Github编辑自己创建的本地博客文件夹中的_config.yml中的deploy节点 1234deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 注意：repo为这种形式的是配置了SSH Key之后的，如果没有配置则使用Https形式的地址。 为了能够使Hexo部署到GitHub上，需要安装一个插件 1npm install hexo-deployer-git --save 然后输入以下命令 123hexo cleanhexo generatehexo deploy 在浏览器输入username.github.io就可以访问你的博客了。 三、配置主题Hexo主题在Github上有很多，如 https://github.com/iissnan/hexo-theme-next https://github.com/litten/hexo-theme-yilia https://github.com/viosey/hexo-theme-material https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak https://github.com/pinggod/hexo-theme-apollo https://github.com/ppoffice/hexo-theme-icarus 挑选自己喜欢的一款。当然，自己能够DIY也是极好的。 四、发布新文章执行以下命令 1hexo new post &apos;文章标题&apos; 这样会在本地博客的source-&gt;_posts路径下看到新建的文章，是md格式的，找一个markdown文本编辑器进行编辑即可。 编辑完成之后，与上面一样，执行以下命令 123hexo cleanhexo generatehexo deploy 即可更新到Github上。 五、绑定个人域名如果你想拥有一个炫酷的域名，那就往下看吧 （1）购买域名可以去万网买，也可以去其它地方。具体购买过程就不多讲了。 （2）配置DNS地址这里以万网为例。进入万网的管理控制台进行修改，修改DNS为DNSPod的免费DNS地址：f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net (3)域名解析注册一个DNSPod账号，登录之后把我们新注册的域名加进去，在域名解析界面添加3条记录 123@ A 192.30.252.153@ A 192.30.252.154www CNAME username.github.io. 如图所示。 (4)添加CNAME文件新建一个名为CNAME的文件，无后缀，内容为你的域名地址。将该文件放入本地博客的source文件夹里面，并更新到Github。 到这里就绑定域名成功了。 参考链接 http://www.jianshu.com/p/2cfa48c9c5eb http://www.jianshu.com/p/fb0b0258362f https://github.com/litten/hexo-theme-yilia http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2","tags":[{"name":"Blog","slug":"Blog","permalink":"//breadawesome.me/tags/Blog/"},{"name":"Hexo","slug":"Hexo","permalink":"//breadawesome.me/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"//breadawesome.me/tags/Github/"}]}]